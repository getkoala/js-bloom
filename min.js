function r(t,i=null){if(!t)throw new Error("Missing argument: size");this.ELEMENT_WIDTH=32,this.size=t,this.field=i||[];let e=Math.floor((t-1)/this.ELEMENT_WIDTH+1);if(!i)for(let s=0,o=e-1,h=0<=o;h?s<=o:s>=o;h?s++:s--)this.field[s]=0;return this}r.prototype.add=function(t){return this.set(t,1)};r.prototype.remove=function(t){return this.set(t,0)};r.prototype.set=function(t,i){if(t>=this.size)throw new Error("BitArray index out of bounds");let e=this.arrayPosition(t),s=this.bitChange(t);return i===1?this.field[e]=this.abs(this.field[e]|s):(this.field[e]&s)!==0&&(this.field[e]=this.abs(this.field[e]^s)),!0};r.prototype.get=function(t){if(t>=this.size)throw new Error("BitArray index out of bounds");let i=this.arrayPosition(t),e=this.bitChange(t);return this.abs(this.field[i]&e)>0?1:0};r.prototype.arrayPosition=function(t){return Math.floor(t/this.ELEMENT_WIDTH)};r.prototype.bitChange=function(t){return this.abs(1<<t%this.ELEMENT_WIDTH)};r.prototype.abs=function(t){return t<0&&(t+=4294967295),t};r.prototype.toString=function(){let t="";for(let i=0,e=this.size-1,s=0<=e;s?i<=e:i>=e;s?i++:i--)t+=this.get(i);return t};function u(){let t,i=[];for(var e=0;e<256;e++){t=e;for(var s=0;s<8;s++)t=t&1?3988292384^t>>>1:t>>>1;i[e]=t}return i}var c=u(),f=t=>{let i=a(t),e=0,s=0;e=e^-1;let o=0,h=i.length;for(;o<h;)s=(e^i[o])&255,e=e>>>8^c[s],o++;return e=e^-1,e<0&&(e+=4294967296),e},a=t=>{let i=[],e=0;for(;e<t.length;)i.push(t.charCodeAt(e)),++e;return i};var l=function(t={}){this.options={size:100,hashes:4,seed:new Date().getTime()/1e3,bits:null};let i=delete t.items;for(let e in t){let s=t[e];this.options[e]=s}return this.bits=new r(this.options.size,this.options.bits),i&&this.add(i),this},n=l.prototype;n.add=function(...t){for(let i of t)for(let e of Array.from(this.indexesFor(i)))this.bits.add(e)};n.test=function(...t){for(let i of t)for(let e of this.indexesFor(i))if(this.bits.get(e)===0)return!1;return!0};n.toHash=function(){let t={};for(let i in this.options){let e=this.options[i];t[i]=e}return t.bits=this.bits.field,t};n.toJson=function(){return JSON.stringify(this.toHash())};n.indexesFor=function(t){let i=[];for(let e=0,s=this.options.hashes-1,o=0<=s;o?e<=s:e>=s;o?e++:e--)i.push(f(`${t}:${e+this.options.seed}`)%this.options.size);return i};export{l as JSBloom};
